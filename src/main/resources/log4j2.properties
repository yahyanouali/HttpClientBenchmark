# ==============================================================
# Root Logger Configuration
# This sets the logging level for the entire application.
# You can adjust the level to one of the following: trace, debug, info, warn, error, fatal.
# All loggers without specific configurations will inherit this level.
# ==============================================================

# Set the root logger level to 'info' and attach the console appender to it.
rootLogger.level = info
rootLogger.appenderRefs = console
rootLogger.appenderRef.console.ref = ConsoleAppender

# ==============================================================
# Console Appender Configuration
# This section defines the console appender, which outputs log messages to the console.
# ==============================================================

# Define the type of appender as 'Console'.
appender.console.type = Console

# Name of the console appender. This name is used to refer to it in other configurations.
appender.console.name = ConsoleAppender

# Set the layout type for the console appender. We use a pattern layout to define how log messages appear.
appender.console.layout.type = PatternLayout

# Define the pattern used for formatting log messages in the console.
# %d - Displays the timestamp in the format: yyyy-MM-dd HH:mm:ss.SSS (date and time with milliseconds).
# [%t] - Shows the thread name that logs the message, enclosed in square brackets.
# %-5level - Displays the log level (e.g., INFO, DEBUG), left-aligned and padded to 5 characters for consistent width.
# %logger{36} - Shows the name of the logger (usually the class name), truncated to a maximum of 36 characters.
# - %msg - Displays the actual log message. The '-' is a separator for clarity.
# %n - Adds a newline character to separate log entries.
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} [%tid][%t] %-5level %logger{36} - %msg%n

# ==============================================================
# Package-Specific Logger Configuration (Optional)
# You can add custom loggers for specific packages/classes to control their log levels independently.
# ==============================================================

# Example: Define a logger for the 'com.example' package.
logger.app.name = com.example
logger.app.level = debug       # Set to 'debug' level to capture detailed logs for this package.
logger.app.additivity = false  # Prevents log messages from being passed to the parent loggers (only logs to the console).
logger.app.appenderRefs = console
logger.app.appenderRef.console.ref = ConsoleAppender
